@startuml

title Coding Events

scale 0.75

' this applies to both classes and interfaces
skinparam class {
    BackgroundColor<<Controller>> #ffdddd
    BackgroundColor<<Repository>> #ddffdd
    BackgroundColor<<Entity>> #ddddff
    BackgroundColor<<MappedSuperClass>> #ddddff
}

/'
class CodingEventsApplication {
    {static} main(args : Strings) : void
}
'/

' Repositories are in the data directory
package "org.springframework.data.repository" as RepoPkg {
    interface Repository <T,ID>
    interface CRUDRepository <T,ID> extends Repository {
        count() : long
        delete(entity : T) : void
        deleteAll() : void
        deleteAll(entities : Iterable<? extends T>) : void
        deleteById(id : ID) : void
        exitsById(id : ID) : boolean
        findAll() : Iterable<T>
        findAllByID(ids : Iterable<ID>) : Iterable<T>
        findById(id : ID) : Optional<T>
        save(entity : S) : <S extends T> S
        saveAll(entities Iterable< S >) : <S extends T> Iterable< S >
    }
}
package data {
    interface EventRepository<Event,Integer> <<Repository>> extends CRUDRepository {}
    interface EventCategoryRepository<EventCategory,Integer> <<Repository>> extends CRUDRepository {}
    interface TagRepository<Tag,Integer> <<Repository>> extends CRUDRepository {}
    note "Repositories are in the data directory" as RepoNote
}

package controllers {
    class "@RequestMapping("events")\nEventController" as EventController <<Controller>> {
        @Autowired eventRepo : EventRepository
        @Autowired eventCatRepo : EventCategoryRepository
        @Autowired tagRepo : TagRepository

        +@GetMapping("index") displayAllEvents(@RequestParam(required = false) categoryId : Integer, model : Model) : String
            {method} \t title = "All Tags"
            {method} \t categories = eventCatRepo.findAll()
            {method} \t return "event/index"
        +@GetMapping("create") renderCreateEventCategoryForm(model : Model) : String
            {method} \t title = "Create Tag"
            {method} \t events = eventRepo.findAll()
            {method} \t categories = eventCatRepo.findAll()
            {method} \t return "events/index"
        +@PostMapping("create") processCreateEventForm(newEvent : Event, errors : Errors, model : Model) : String
            {method} \t OnError
                {method} \t\t title = "Create Tag"
                {method} \t\t return "events/index"
            {method} \t Else
                {method} \t\t return "redirect:"
        +@GetMapping("details") displayEventDetails(@RequestParam eventId : Integer, model : Model) : String
            {method} \t OnEmpty
                {method} \t\t title = "Invalid " + eventId
            {method} \t Else
                {method} \t\t title = result.get().getName()
                {method} \t\t event = result.get()
            {method} \t return "events/details"
        +@PostMapping("add-tag") renderAddTagForm(@RequestParam Integer eventId, Model model) : String
            {method} \t return "events/add-tag"
        +@GetMapping("add-tag") processAddTagForm(@ModelAttribute @Valid EventTagDTO eventTag, Errors errors, Model model) : String
                {method} \t\t title = result.get().getName()
                {method} \t\t tags = tagRepo.findAll()
                {method} \t\t eventTag = new eventTagDTO(event);
            {method} \t return "events/add-tag"
    }

    class "@RequestMapping("categories")\nEventCategoryController" as EventCategoryController <<Controller>> {
        @Autowired eventCatRepo : EventCategoryRepository
        +@GetMapping("index") displayAllEventCategories(model : Model) : String
            {method} \t title = "All Tags"
            {method} \t categories = eventCatRepo.findAll()
            {method} \t return "eventCategories/index"
        +@GetMapping("create") renderCreateEventCategoryForm(model : Model) : String
            {method} \t title = "Create Tag"
            {method} \t tags = tagRepo.findAll()
            {method} \t return "eventCategories/index"
        +@PostMapping("create") processCreateEventCategoryForm(newCategory : EventCategory, errors : Errors, model : Model) : String
            {method} \t OnError
                {method} \t\t title = "Create Tag"
                {method} \t\t return "eventCategories/index"
            {method} \t Else
                {method} \t\t return "redirect:"
    }

    class "@RequestMapping("tags")\nTagController" as TagController <<Controller>> {
        @Autowired tagRepo : TagRepository
        +@GetMapping("index") displayAllTags(model : Model) : String
            {method} \t title = "All Tags"
            {method} \t tags  = tagRepo.findAll()
            {method} \t return "tags/index"
        +@GetMapping("create") renderCreateTagForm(model : Model) : String
            {method} \t title = "Create Tag"
            {method} \t tag   = new Tag()
            {method} \t return "tags/index"
        +@PostMapping("create") processCreateTagForm(newTag : Tag, errors : Errors, model : Model) : String
            {method} \t OnError
                {method} \t\t title = "Create Tag"
                {method} \t\t tag   = new Tag()
                {method} \t\t return "tags/index"
            {method} \t Else
                {method} \t\t return "redirect:"
    }

    class "HomeController" as HomeController <<Controller>> {
        + @GetMapping("index") index(model : Model) : String
            {method} \t title = "Coding Events"
            {method} \t return "index"
    }

    note as ControllerNote
    Controllers communicate with the templates in the resources directory.
    Controllers are in the controllers directory.
    Controllers have access to the database?
    Repositories that are used in controllers are autowired.
    Just about every method returns a String to a relative path.
    With exception of the HomeController, every controller has a RequestMapping
    which is a path relative to the templates directory.
    Just about every method has a Model argument.
    endnote
}

package "org.springframework.ui" as ModelPkg {
    interface Model {
        addAllAttributes(attributeValues : Collection<?>) : Model
        addAllAttributes(attributes : Map<String,?>) : Model
        addAttribute(attribute : Object) : Model
        addAttribute(attributeName : String, AttributeValue : Object) : Model
        asMap() : Map<String,Object>
        containsAttribute(attributeName : String) : boolean
        getAttribute(attributeName : String) : Object
        mergeAttributes(attributes : Map<String,?>) : Model
    }
}

ModelPkg .[hidden] controllers

EventRepository <.. EventController  : <<uses>>
EventCategoryRepository <.. EventController  : <<uses>>
EventCategoryRepository <.. EventCategoryController  : <<uses>>
TagRepository <.. TagController : <<uses>>
TagRepository <.. EventController  : <<uses>>

' Entities are in the models directory
package models {
    package "dto" as dtos {

        note as DTONote
        Just as SQL has join tables to connect records from
        two different tables by their ids in another table,
        Data Transfer Objects (DTOs) are used to connect
        two objects of different types with another object.
        DTOs should be put in their own package inside the
        models directory.
        It appears they are not entities like the objects
        linked by them.
        endnote

        class EventTagDTO {
            -event : Event
            -tag : Tag
            __
            EventTagDTO()
            ..Setters and Getters..
            +getEvent() : Event
            +setEvent(event : Event) : void
            +getTag() : Tag
            +setTag(tag : Tag) : void
        }
    }

    abstract class AbstractEntity <<MappedSuperClass>> {
        -id : int
        +getId() : int
        +equals(o : Object) : boolean
        +hashcode() : int
    }
    class Event <<Entity>> extends AbstractEntity {
        -name : String
        -details : EventDetails /' OneToOne '/
        -category : EventCategory /' OneToMany '/
        -tags : List<Tag> /' {final} '/
        __
        +Event()
        +Event(name : String, details : String, contactEmail : String, category : EventCategory)
        .. Getters and Setters ..
        +getName() : String
        +setName(name : String) : void
        +getDetails() : EventDetails
        +setDetails(details : EventDetails) : void
        +getCategory() : EventCategory
        +setCategory(category : EventCategory) : void
        +getTags() : List<Tag>
        +setTag(tag : Tag) : void
        ..
        +addTag(tag : Tag) : void
        +deleteTag(tag Tag) void
        +toString() : String
    }
    class EventDetails <<Entity>> extends AbstractEntity {
        -description : String
        -contactEmail : String
        __
        EventDetails()
        EventDetails(description : String, contactEmail : String)
        .. Getters and Setters ..
        +getDescription() : String
        +setDescription(description : String) : void
        +getContactEmail() : String
        +setContacEmail(contactEmail : String) : void
    }
    class EventCategory <<Entity>> extends AbstractEntity {
        -name : String
        -events : List<Event>   /' {final}, OneToMany(mappedBy="category") '/
        __
        EventCategory()
        EventCategory(name : String)
        ..Getters and Setters..
        +getName() : String
        +setName(name : String) : void
        +getEvents() : List<Event>
        ..
        toString() : String
    }
    class Tag <<Entity>> extends AbstractEntity {
        -name : String
        -events : List<Event> /' {final}, ManyToMany(mappedBy="tags") '/
        __
        Tag()
        Tag(name : String)
        ..Getters and Setters..
        +getName() : String
        +setName(name : String) : void
        +getEvents() : List<Event>
        +getDisplayName() : String
    }

    note as ModelNote
    Almost every class is represented by a table in the corresponding database.
    Just about every class in the models package is an @Entity.
    Abstract classes that represent Entity classes should be a @MappedSuperClass.
    endnote

    Tag .[hidden]. ModelNote
    Event <-- EventTagDTO
    Tag <-- EventTagDTO
}

EventController *-- Event : <<contains>>
EventCategoryController *-- EventCategory : <<contains>>
TagController *-- Tag : <<contains>>

Event "1" o-- "1" EventDetails  /' OneToOne '/
Event "1" o-- "*" EventCategory /' OneToMany '/
Event "*" o-- "*" Tag           /' ManyToMany '/

database coding_events {
    entity hibernate_sequence {
        next_val : INTEGER
    }

    entity event {
        id : INTEGER
        name : VARCHAR(50)
        category_id : INTEGER
        details_id : INTEGER
    }

    /' 1..1 '/
    entity event_details {
        id : INTEGER
        contact_email : VARCHAR(255)
        description  VARCHAR(500)
    }

    /' 1..* '/
    entity event_category {
        id : INTEGER
        name : VARCHAR(255)
    }

    /' *..* '/
    entity tag {
        id : INTEGER
        name : VARCHAR(255)
    }

    entity event_tags {
        events_id : INTEGER
        tag_id : INTEGER
    }

    event -- event_tags
    event -- event_details
    event -- event_category
    event_tags -- tag
}

AbstractEntity .. hibernate_sequence
Event .. event
EventCategory .. event_category
EventDetails .. event_details
Tag .. tag

' Top to bottom
data .[hidden]. controllers
controllers .[hidden]. models
coding_events .[hidden] models

' I removed the views part because it was slowing everything down.
' See file_list.puml

@enduml